package DifferentPanes;

import GameRule. GameHistory;
import Roles.Infantry;
import Roles.NoCharacter;
import Roles.Archer;
import Roles.Cavalryman;
import Roles.Character;
import GameRule.GameRule;
import GameRule.Control;
import Map.DrawRectangle;
import Map.MapImage;
import Media.SoundControl;
import Player.PlayerActions;
import javafx.animation.Animation;
import javafx.animation.FadeTransition;
import javafx.event.EventHandler;
import javafx.scene.control.Button;
import javafx.scene.effect.GaussianBlur;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.util.Duration;

import java.io.*;
import FileOperation.ReadMap;
import FileOperation.ReadRoles;

public class MapPane extends Pane {
	
    private ImageView imageView;
    private Button btFunction;
    private ReadMap map;
    private Rectangle left, right;
    private DrawRectangle prompt, click;
    //private Rectangle rectangle[][], rectangles[][], left, right;
    private Character character[][];
    private GameRule rule;
    private Control control;
	private MapImage mapImage;
    private PlayerActions player;
    private GameHistory history;
    private FunctionPane function;
    private WinPane winner;
    private SoundControl sound;
    private ReadRoles r;

    public MapPane() throws FileNotFoundException {
        super();
        character= new Character[10][10];
        prompt = new DrawRectangle();
        click = new DrawRectangle();
        r = new ReadRoles();
        sound = new SoundControl();
        history = new GameHistory();
        map = new ReadMap();
        rule = new GameRule();
        control = new Control();
        player = new PlayerActions();

        history.saveRolesHistory(r.getNumberOfRoles(), history.getCurrentSteps());
        history.saveTeamHistory(r.getTheTeam(), history.getCurrentSteps());

        imageView = new ImageView("pic/map/Map.jpg");
        imageView.setFitHeight(670);
        imageView.setFitWidth(980);
        getChildren().add(imageView);

        btFunction = new Button("功能");
        btFunction.setPrefHeight(50);
        btFunction.setPrefWidth(120);
        btFunction.setLayoutX(700);
        btFunction.setLayoutY(0);
        getChildren().add(btFunction);
        
        btFunction.setOnAction(event ->{
        	btFunction.setVisible(false);
            function.setVisible(true);
        });

        //创建rectangle，用于提示当前玩家
        left = new Rectangle();  //提示左方下棋
        left.setFill(Color.YELLOW);
        left.setWidth(40);
        left.setHeight(40);
        left.setLayoutX(10);
        left.setLayoutY(10);
        left.setEffect(new GaussianBlur(100));
        /* 该类用于实现渐入渐出的效果 */
        FadeTransition ft = new FadeTransition(Duration.millis(400),left);
        ft.setToValue(0.0);
        ft.setAutoReverse(true);
        ft.setCycleCount(Animation.INDEFINITE);
        ft.play();
        left.setVisible(false);
        getChildren().add(left);

        right = new Rectangle();  //提示右方下棋
        right.setFill(Color.YELLOW);
        right.setWidth(40);
        right.setHeight(40);
        right.setLayoutX(800);
        right.setLayoutY(10);
        right.setEffect(new GaussianBlur(100));
        /* 该类用于实现渐入渐出的效果 */
        FadeTransition rg = new FadeTransition(Duration.millis(400),right);
        rg.setToValue(0.0);
        rg.setAutoReverse(true);
        rg.setCycleCount(Animation.INDEFINITE);
        rg.play();
        right.setVisible(false);
        getChildren().add(right);

        //初始化，设置左边先开始
        player.setPlayer(left, right);
        //可走方向
        /*rectangle = new Rectangle[10][10];
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
                rectangle[i][j] = new Rectangle();
                rectangle[i][j].setOpacity(0.3);
                rectangle[i][j].setFill(Color.BLUE);
                rectangle[i][j].setHeight(60);
                rectangle[i][j].setWidth(60);
                rectangle[i][j].setLayoutX(60 * j + 100);
                rectangle[i][j].setLayoutY(50 + 60 * i);
                getChildren().add(rectangle[i][j]);
                rectangle[i][j].setVisible(false);
            }
        }*/
        for (int i = 0; i < 10; i++) {
        	for (int j = 0; j < 10; j++) {
        		prompt.setOpacity(0.3, i, j);
        		prompt.setInVisible(i, j);
        		prompt.setBlue(i, j);
        		click.setYellow(i, j);
        		click.setVisible(i, j);
        		click.setOpacity(0, i, j);
        		getChildren().add(prompt.getRectangle()[i][j]);
        		getChildren().add(click.getRectangle()[i][j]);
        		
        	}
        }
        //点击选中
        /*rectangles = new Rectangle[10][10];
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
                rectangles[i][j] = new Rectangle();
                rectangles[i][j].setFill(Color.YELLOW);
                rectangles[i][j].setHeight(60);
                rectangles[i][j].setWidth(60);
                rectangles[i][j].setLayoutX(60 * j + 100);
                rectangles[i][j].setLayoutY(50 + 60 * i);
                getChildren().add(rectangles[i][j]);
                rectangles[i][j].setOpacity(0);
            }
        }*/
        control.setDisable(r.getTheTeam(), player.getCurrentPlayer() ,click.getRectangle());
        mapImage = new MapImage(map.getTheTeam(), map.getNumberOfMap());
        
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
            	switch(r.getNumberOfRoles()[i][j]) {
            	case Character.infantry:
            		character[i][j] = new Infantry(i, j, r.getTheTeam()[i][j]);
            		break;
            	case Character.archer:
            		character[i][j] = new Archer(i, j, r.getTheTeam()[i][j]);
            		break;
            	case Character.cavalryman:
            		character[i][j] = new Cavalryman(i, j, r.getTheTeam()[i][j]);
            		break;
            	default:
            		character[i][j] = new NoCharacter(i, j, r.getTheTeam()[i][j]);
            		break;
            	}           	
            	getChildren().add(mapImage.getMapImage()[i][j]);
                getChildren().add(character[i][j].getCharacterView());
                
                character[i][j].getCharacterView().addEventFilter(
                        MouseEvent.MOUSE_ENTERED_TARGET,
                        new CleanPrompt(i, j)
                );
                character[i][j].getCharacterView().addEventFilter(
                        MouseEvent.MOUSE_EXITED_TARGET,
                        new Prompt(i, j)
                );
                click.getRectangle()[i][j].addEventFilter(
                        MouseEvent.MOUSE_CLICKED,
                        new Move(i, j)
                );
            }
        }
        
        winner = new WinPane();
        winner.setPrefWidth(200);
        winner.setPrefHeight(100);
        winner.setLayoutY(330);
        winner.setLayoutX(530);
        getChildren().add(winner);
        winner.setVisible(false);
        winner.getBtOver().setOnAction(e ->{
            winner.setVisible(false);
        });

        function = new FunctionPane();
        function.setPrefWidth(120);
        function.setPrefHeight(510);
        function.setLayoutY(0);
        function.setLayoutX(600);
        getChildren().add(function);
        function.setVisible(false);
        function.setOnMouseExited(e ->{
            function.setVisible(false);
            btFunction.setVisible(true);
        });

        //悔棋功能
        function.getBtUndo().setOnAction(e ->{
            history.setNextStep(history.getCurrentSteps());
            if(history.getNextStep() > 0){
                try {
                    history.changeMap(history.getTeamHistory()[history.getCurrentSteps()-1], r.getTheTeam(), history.getRolesHistory()[history.getCurrentSteps()-1],
                            r.getNumberOfRoles(), character);
                } catch (FileNotFoundException e1) {
                    e1.printStackTrace();
                }
                history.minusCurrentSteps();
                history.setNextStep(history.getCurrentSteps());
                player.changePlayer();
                player.setPlayer(left, right);
                control.setDisable(r.getTheTeam(), player.getCurrentPlayer(), click.getRectangle());
            }
        });

        //重新开始功能
        function.getBtRestart().setOnAction(e ->{
                    try {
                        history.changeMap(history.getTeamHistory()[0], r.getTheTeam(), history.getRolesHistory()[0],
                                r.getNumberOfRoles(), character);
                    } catch (FileNotFoundException e1) {
                        e1.printStackTrace();
                    }
                    history.resetCurrentSteps();
            player.resetPlayer();
            player.setPlayer(left, right);
            control.setDisable(r.getTheTeam(), player.getCurrentPlayer(), click.getRectangle());
        });

        //存档功能
        function.getBtSave().setOnAction(e -> {
            try {
                System.out.println(getAvailableSaveCount());
                ObjectOutputStream output = new ObjectOutputStream(new FileOutputStream("saves/save" + getAvailableSaveCount() + ".dat"));
                output.writeObject(history);
                output.writeInt(history.getCurrentSteps());
                output.close();
            }catch (IOException ex) {
                ex.printStackTrace();
            }
        });
    }

    public static int getAvailableSaveCount(){
        int i = 0;
        File f;
        do {
            i++;
            f = new File("saves/save" + i + ".dat");
        }
        while (f.exists());
        return i;
    }
    
    
   private class Move implements EventHandler<MouseEvent> {
        private int i;
        private int j;

        Move(int i, int j) {
            this.i = i;
            this.j = j;
        }
        @Override
        public void handle(MouseEvent event) {
                if(control.isClick(click.getRectangle())) {
                    int k = PlaceOfVisibel(click.getRectangle()) / 10;
                    int m = PlaceOfVisibel(click.getRectangle()) % 10;
                    if (r.getNumberOfRoles()[k][m] == Character.infantry) {
                    	int direction = rule.judgeAction(k, m, i, j, r.getTheTeam(), r.getNumberOfRoles(), map.getNumberOfMap());
                    	character[k][m].setCurrentMoveDistance(Character.moveDistanceShort);
                    	player.action(direction, r.getTheTeam(), r.getNumberOfRoles(), character, k, m, control, history);
                    }
                    else if (r.getNumberOfRoles()[k][m] == Character.cavalryman) {
                    	int direction = rule.judgeAction(k, m, i, j, r.getTheTeam(), r.getNumberOfRoles(), map.getNumberOfMap());
                    	if (direction < Control.UP2) {
                    		character[k][m].setCurrentMoveDistance(Character.moveDistanceShort);
                    	}
                    	else {
                    		character[k][m].setCurrentMoveDistance(Character.moveDistanceLong);
                    		direction -= 4;
                    	}
                    	player.action(direction, r.getTheTeam(), r.getNumberOfRoles(), character, k, m, control, history);
                    }
                    else {
                    	int direction = rule.judgeAction(k, m, i, j, r.getTheTeam(), r.getNumberOfRoles(), map.getNumberOfMap());
                    	character[k][m].setCurrentMoveDistance(Character.moveDistanceShort);
                    	player.action(direction, r.getTheTeam(), r.getNumberOfRoles(), character, k, m, control, history);
                    }

                    click.setOpacity(0, k, m);
                    control.setDisable(r.getTheTeam(), player.getCurrentPlayer(), click.getRectangle());
                }
                else if(r.getNumberOfRoles()[i][j] != 0) {
                	click.setOpacity(0.4, i, j);
                    sound.play(r.getNumberOfRoles()[i][j] - 1);
                    for (int i = 0; i < 10; i++) {
                        for (int j = 0; j < 10; j++) {
                            click.getRectangle()[i][j].setDisable(false);
                        }
                    }
                }
                player.setPlayer(left, right);

                if(rule.leftWin(r.getTheTeam(), r.getNumberOfRoles(), map.getNumberOfMap())) {
                	winner.setVisible(true);
                	winner.getLable1().setVisible(true);
                	winner.getLable2().setVisible(false);
                	for(int i = 0; i < 10; i++){
                		for (int j = 0; j < 10; j++){
                			click.getRectangle()[i][j].setDisable(true);
                		}
                	}
                }

                if(rule.rightWin(r.getTheTeam(), r.getNumberOfRoles(), map.getNumberOfMap())) {
                	winner.setVisible(true);
                	winner.getLable1().setVisible(false);
                	winner.getLable2().setVisible(true);
                	for(int i = 0; i < 10; i++){
                		for (int j = 0; j < 10; j++){
                			click.getRectangle()[i][j].setDisable(true);
                		}
                	}
                }
        }

    }

   private class Prompt implements EventHandler<MouseEvent> {
        private int i;
        private int j;

        Prompt(int i, int j) {
            this.i = i;
            this.j = j;
        }

        @Override
        public void handle(MouseEvent event) {
            if (r.getNumberOfRoles()[i][j] == Character.infantry) {
            	if (rule.canMoveOneStep(Control.UP, r.getTheTeam(), r.getNumberOfRoles(), map.getNumberOfMap(), i, j)) {
            		prompt.setInVisible(i-1, j);
                }
                if (rule.canMoveOneStep(Control.DOWN, r.getTheTeam(), r.getNumberOfRoles(), map.getNumberOfMap(), i, j)) {
                	prompt.setInVisible(i+1, j);
                }
                if (rule.canMoveOneStep(Control.LEFT, r.getTheTeam(), r.getNumberOfRoles(), map.getNumberOfMap(), i, j)) {
                	prompt.setInVisible(i, j-1);
                }
                if (rule.canMoveOneStep(Control.RIGHT, r.getTheTeam(), r.getNumberOfRoles(), map.getNumberOfMap(), i, j)) {
                	prompt.setInVisible(i, j+1);
                }
            }
            else if (r.getNumberOfRoles()[i][j] == Character.cavalryman) {
            	if (rule.canMoveTwoSteps(Control.UP, r.getTheTeam(), r.getNumberOfRoles(), map.getNumberOfMap(), i, j)) {
            		prompt.setInVisible(i-1, j);
            		prompt.setInVisible(i-2, j);
                }
                if (rule.canMoveTwoSteps(Control.DOWN, r.getTheTeam(), r.getNumberOfRoles(), map.getNumberOfMap(), i, j)) {
                	prompt.setInVisible(i+1, j);
            		prompt.setInVisible(i+2, j);
                }
                if (rule.canMoveTwoSteps(Control.LEFT, r.getTheTeam(), r.getNumberOfRoles(), map.getNumberOfMap(), i, j)) {
                	prompt.setInVisible(i, j-1);
            		prompt.setInVisible(i, j-2);
                }
                if (rule.canMoveTwoSteps(Control.RIGHT, r.getTheTeam(), r.getNumberOfRoles(), map.getNumberOfMap(), i, j)) {
                	prompt.setInVisible(i, j+1);
            		prompt.setInVisible(i, j+2);
                }
            }
            else {
                if (rule.canMoveOneStep(Control.UP, r.getTheTeam(), r.getNumberOfRoles(), map.getNumberOfMap(), i, j)) {
                	prompt.setInVisible(i-1, j);
                }
                if (rule.canMoveOneStep(Control.DOWN, r.getTheTeam(), r.getNumberOfRoles(), map.getNumberOfMap(), i, j)) {
                	prompt.setInVisible(i+1, j);
                }
                if (rule.canMoveOneStep(Control.LEFT, r.getTheTeam(), r.getNumberOfRoles(), map.getNumberOfMap(), i, j)) {
                	prompt.setInVisible(i, j-1);
                }
                if (rule.canMoveOneStep(Control.RIGHT, r.getTheTeam(), r.getNumberOfRoles(), map.getNumberOfMap(), i, j)) {
                	prompt.setInVisible(i, j+1);
                }
            }
        }
    }

    
    private class CleanPrompt implements EventHandler<MouseEvent> {
        private int i;
        private int j;

        CleanPrompt(int i, int j) {
            this.i = i;
            this.j = j;
        }

        @Override
        public void handle(MouseEvent event) {
            if (r.getNumberOfRoles()[i][j] == Character.infantry) {
            	if (rule.canMoveOneStep(Control.UP, r.getTheTeam(), r.getNumberOfRoles(), map.getNumberOfMap(), i, j)) {
            		prompt.setVisible(i-1, j);
                }
                if (rule.canMoveOneStep(Control.DOWN, r.getTheTeam(), r.getNumberOfRoles(), map.getNumberOfMap(), i, j)) {
                	prompt.setVisible(i+1, j);
                }
                if (rule.canMoveOneStep(Control.LEFT, r.getTheTeam(), r.getNumberOfRoles(), map.getNumberOfMap(), i, j)) {
                	prompt.setVisible(i, j-1);
                }
                if (rule.canMoveOneStep(Control.RIGHT, r.getTheTeam(), r.getNumberOfRoles(), map.getNumberOfMap(), i, j)) {
                	prompt.setVisible(i, j+1);
                }
            }
            else if (r.getNumberOfRoles()[i][j] == Character.cavalryman) {
            	if (rule.canMoveTwoSteps(Control.UP, r.getTheTeam(), r.getNumberOfRoles(), map.getNumberOfMap(), i, j)) {
            		prompt.setVisible(i-1, j);
            		prompt.setVisible(i-2, j);
                }
                if (rule.canMoveTwoSteps(Control.DOWN, r.getTheTeam(), r.getNumberOfRoles(), map.getNumberOfMap(), i, j)) {
                	prompt.setVisible(i+1, j);
            		prompt.setVisible(i+2, j);
                }
                if (rule.canMoveTwoSteps(Control.LEFT, r.getTheTeam(), r.getNumberOfRoles(), map.getNumberOfMap(), i, j)) {
                	prompt.setVisible(i, j-1);
            		prompt.setVisible(i, j-2);
                }
                if (rule.canMoveTwoSteps(Control.RIGHT, r.getTheTeam(), r.getNumberOfRoles(), map.getNumberOfMap(), i, j)) {
                	prompt.setVisible(i, j+1);
            		prompt.setVisible(i, j+2);
                }
            }
            else {
                if (rule.canMoveOneStep(Control.UP, r.getTheTeam(), r.getNumberOfRoles(), map.getNumberOfMap(), i, j)) {
                	prompt.setVisible(i-1, j);
                }
                if (rule.canMoveOneStep(Control.DOWN, r.getTheTeam(), r.getNumberOfRoles(), map.getNumberOfMap(), i, j)) {
                	prompt.setVisible(i+1, j);
                }
                if (rule.canMoveOneStep(Control.LEFT, r.getTheTeam(), r.getNumberOfRoles(), map.getNumberOfMap(), i, j)) {
                	prompt.setVisible(i, j-1);
                }
                if (rule.canMoveOneStep(Control.RIGHT, r.getTheTeam(), r.getNumberOfRoles(), map.getNumberOfMap(), i, j)) {
                	prompt.setVisible(i, j+1);
                }
            }
        }

    }

    private int PlaceOfVisibel(Rectangle[][] rectangle){
        int i, j;
        for( i = 0; i < 10; i++){
            for( j = 0; j < 10; j++){
                if(rectangle[i][j].getOpacity() > 0.3)
                    return (10 * i + j);
            }
        }
        return -1;
    }

    public FunctionPane getFunction(){
        return function;
    }

    public ReadRoles getRoles() {
    	return r;
    }
    
    public Character[][] getCharacter() {
    	return character;
    }
}