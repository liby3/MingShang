package GameRule;

public class GameRule {
    public  GameRule() {
    	;
    }

    
    public boolean canMoveOneStep(int direction, int[][] theTeam, int[][] numberOfRoles, int[][]numberOfMap, int i, int j) {
    	boolean result = false;
    	switch(direction) {
    	case Control.UP:
    		if(i > 0) {
                if(numberOfMap[i-1][j] == Control.areaUnavailable) {
                    return false;
                }
                else if(theTeam[i][j] == theTeam[i-1][j]) {
                    return false;
                }
                if(theTeam[i][j] != theTeam[i-1][j] && numberOfRoles[i][j] < numberOfRoles[i-1][j]) {
                    return false;
                }
                else {
                	return true;
                }
            }
            else {
                return false;
            }
    	}
    }
    
    public boolean canNormalUp(int[][] theTeam, int[][] numberOfRoles, int[][]numberOfMap, int i, int j) {
        if(i > 0) {
            if(numberOfMap[i-1][j] == Control.areaUnavailable) {
                return false;
            }
            else if(theTeam[i][j] == theTeam[i-1][j]) {
                return false;
            }
            if(theTeam[i][j] != theTeam[i-1][j] && numberOfRoles[i][j] < numberOfRoles[i-1][j]) {
                return false;
            }
            else {
            	return true;
            }
        }
        else {
            return false;
        }
    }

    public boolean canNormalDown(int[][] theTeam, int[][] numberOfRoles, int[][]numberOfMap, int i, int j) {
        if(i < 9) {
            if(numberOfMap[i+1][j] == Control.areaUnavailable) {
                return false;
            }
            else if(theTeam[i][j] == theTeam[i+1][j]) {
                return false;
            }
            
            if(theTeam[i][j] != theTeam[i+1][j] && numberOfRoles[i][j] < numberOfRoles[i+1][j]) {
                return false;
            }
            else{
            	return true;
            }
        }
        else {
            return false;
        }
    }

    public boolean canNormalLeft(int[][] theTeam, int[][] numberOfRoles, int[][]numberOfMap, int i, int j) {
        if(j > 0) {
            if (numberOfMap[i][j-1] == Control.areaUnavailable) {
                return false;
            }
            else if(theTeam[i][j] == theTeam[i][j-1]) {
                return false;
            }
            if(theTeam[i][j] != theTeam[i][j-1] && numberOfRoles[i][j] < numberOfRoles[i][j-1]) {
                return false;
            }
            else {
                return true;
            }
        }
        else {
            return false;
        }
    }

    public boolean canNormalRight(int[][] theTeam, int[][] numberOfRoles, int[][]numberOfMap, int i, int j) {
        if(j < 9) {
            if(numberOfMap[i][j+1] == Control.areaUnavailable) {
                return false;
            }
            else if(theTeam[i][j] == theTeam[i][j+1]) {
                return false;
            }
            if(theTeam[i][j] != theTeam[i][j+1] && numberOfRoles[i][j] < numberOfRoles[i][j+1]) {
                return false;
            }
            else {
                return true;
            }
        }
        else {
            return false;
        }
    }
    
    public boolean canTwoStepsUp(int[][] theTeam, int[][] numberOfRoles, int[][]numberOfMap, int i, int j) {
    	if(i > 1) {
            if(numberOfMap[i-1][j] == Control.areaUnavailable || numberOfMap[i-2][j] == Control.areaUnavailable) {
                return false;
            }
            else if(theTeam[i][j] == theTeam[i-1][j] || theTeam[i][j] == theTeam[i-2][j]) {
                return false;
            }
            if((theTeam[i][j] != theTeam[i-1][j] && numberOfRoles[i][j] < numberOfRoles[i-1][j]) ||(theTeam[i][j] != theTeam[i-2][j] && numberOfRoles[i][j] < numberOfRoles[i-2][j])) {
                return false;
            }
            else {
            	return true;
            }
        }
        else {
            return false;
        }
    }
    
    public boolean canTwoStepsDown(int[][] theTeam, int[][] numberOfRoles, int[][]numberOfMap, int i, int j) {
    	if(i < 8) {
            if(numberOfMap[i+1][j] == Control.areaUnavailable || numberOfMap[i+2][j] == Control.areaUnavailable) {
                return false;
            }
            else if(theTeam[i][j] == theTeam[i+1][j] || theTeam[i][j] == theTeam[i+2][j]) {
                return false;
            }
            
            if((theTeam[i][j] != theTeam[i+1][j] && numberOfRoles[i][j] < numberOfRoles[i+1][j]) || (theTeam[i][j] != theTeam[i+2][j] && numberOfRoles[i][j] < numberOfRoles[i+2][j])) {
                return false;
            }
            else{
            	return true;
            }
        }
        else {
            return false;
        }
    }
    
    public boolean canTwoStepsLeft(int[][] theTeam, int[][] numberOfRoles, int[][]numberOfMap, int i, int j) {
        if(j > 1) {
            if (numberOfMap[i][j-1] == Control.areaUnavailable || numberOfMap[i][j-2] == Control.areaUnavailable) {
                return false;
            }
            else if(theTeam[i][j] == theTeam[i][j-1] || theTeam[i][j] == theTeam[i][j-2]) {
                return false;
            }
            if((theTeam[i][j] != theTeam[i][j-1] && numberOfRoles[i][j] < numberOfRoles[i][j-1]) || (theTeam[i][j] != theTeam[i][j-2] && numberOfRoles[i][j] < numberOfRoles[i][j-2])) {
                return false;
            }
            else {
                return true;
            }
        }
        else {
            return false;
        }
    }
    
    public boolean canTwoStepsRight(int[][] theTeam, int[][] numberOfRoles, int[][]numberOfMap, int i, int j) {
        if(j < 8) {
            if(numberOfMap[i][j+1] == Control.areaUnavailable || numberOfMap[i][j+2] == Control.areaUnavailable) {
                return false;
            }
            else if(theTeam[i][j] == theTeam[i][j+1] || theTeam[i][j] == theTeam[i][j+2]) {
                return false;
            }
            if((theTeam[i][j] != theTeam[i][j+1] && numberOfRoles[i][j] < numberOfRoles[i][j+1]) || (theTeam[i][j] != theTeam[i][j+2] && numberOfRoles[i][j] < numberOfRoles[i][j+2])) {
                return false;
            }
            else {
                return true;
            }
        }
        else {
            return false;
        }
    }

}
